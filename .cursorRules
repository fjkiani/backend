Instructions
During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the Lessons section in the .cursorrules file so you will not make the same mistake again.

You should also use the .cursorrules file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g. [X] Task 1 [ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask. Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan. The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

Tools
Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

Screenshot Capture:
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
LLM Verification with Images:
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
Example workflow:

from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
LLM
You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
The LLM API supports multiple providers:

OpenAI (default, model: gpt-4o)
Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
DeepSeek (model: deepseek-chat)
Anthropic (model: claude-3-sonnet-20240229)
Gemini (model: gemini-pro)
Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)
But usually it's a better idea to check the content of the file and use the APIs in the tools/llm_api.py file to invoke the LLM if needed.

Web browser
You could use the tools/web_scraper.py file to scrape the web.

venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
This will output the content of the web pages.

Search engine
You could use the tools/search_engine.py file to search the web.

venv/bin/python ./tools/search_engine.py "your search keywords"
This will output the search results in the following format:

URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
If needed, you can further use the web_scraper.py file to scrape the web page content.

Lessons
User Specified Lessons
You have a python venv in ./venv. Use it.
Include info useful for debugging in the program output.
Read the file before you try to edit it.
Due to Cursor's limit, when you use git and gh and need to submit a multiline commit message, first write the message in a file, and then use git commit -F <filename> or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
Cursor learned
For search results, ensure proper handling of different character encodings (UTF-8) for international queries
Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
When using f-strings with JSON templates, double the curly braces {{ and }} to escape them properly and avoid format specifier errors
When working with experimental models like gemini-2.0-flash-thinking-exp-01-21, always implement fallback mechanisms to standard models in case the experimental model is unavailable
For options data, use RapidAPI directly instead of the YahooFinanceConnector class to avoid compatibility issues with the OptionChainQuote initialization
When processing options data from RapidAPI, create a mapping of strikes to straddles for easier lookup and processing of call and put data
When implementing the display_analysis function in Streamlit, ensure it combines all necessary display components (market overview, ticker analysis, technical insights, learning points) to avoid NameError exceptions
Scratchpad

--- Completed Features Summary (High-Level) ---
*   **News Integration:** Fetched and displayed news from RealTimeNews and Trading Economics sources.
*   **Market Overview Generation:**
    *   Implemented multi-step analysis (triage, fetch, summarize, synthesize) for RealTimeNews using Cohere & Diffbot.
    *   Implemented overview generation for Trading Economics using Cohere (triage) and Gemini (synthesis), utilizing pre-fetched summaries.
*   **Economic Calendar:**
    *   Integrated RapidAPI for fetching economic events.
    *   Implemented date range filtering and display.
    *   Added contextual LLM (Gemini) interpretation for individual events, considering the market overview.
*   **Earnings Calendar:**
    *   Integrated FMP API for fetching calendar range data.
    *   Integrated Mboum API for historical earnings and estimate trend data.
    *   Implemented on-demand LLM (Gemini) analysis of earnings trends for specific tickers, incorporating historical performance and estimate revisions.
*   **Refactoring:** Introduced news provider adapters (`NewsProviderFactory`, `RealTimeNewsAdapter`) and standardized internal article structure (`InternalArticle`).

--- Task: Implement Market Overview from Multiple News Articles ---

Status: Complete (Initial Implementation)

Overview
Integrate a new feature that analyzes a batch of ~20 news articles to provide a market overview, moving beyond the current single-article analysis triggered by a button.

--- RealTimeNews Source (Completed) ---
[X] 1. Modify backend API fetching (Handled by NewsProviderFactory/RealTimeNewsAdapter)
[X] 2. Create Backend Endpoint (`/api/analysis/market-overview`)
[X] 3. Implement Title Triage (CohereService.triageArticleTitles)
[X] 4. Implement Selective Content Fetching (DiffbotService)
[X] 5. Implement Selective Summarization (CohereService.analyzeArticle)
[X] 6. Implement Synthesis (CohereService.synthesizeOverview)
[X] 7. Integrate into Frontend (`RealTimeNews.tsx`)

--- Economics Source (Completed) ---
[X] 1. Verify/Modify Backend Fetching:
    [X] Ensure `scrapeNews` fetches ~20 articles with existing summaries.
    [X] Map fetched data includes summary in `content` field.
[X] 2. Create New Backend Endpoint (`/api/analysis/trading-economics-overview`):
    [X] Implement new POST route in `analysis.js`.
    [X] Step 1: Reuse `CohereService.triageArticleTitles`.
    [X] Step 2 (Modified): Extract existing summaries from input `articles` for key URLs.
    [X] Step 3 (Skipped): No summarization needed.
    [X] Step 4: Reuse `CohereService.synthesizeOverview` with extracted summaries. (Now uses Gemini)
    [X] Step 5: Return synthesized overview.
[X] 3. Integrate into Frontend (`NewsDashboard.tsx` / relevant TE component):
    [X] Add state for overview/loading.
    [X] Trigger call to *new* `/api/analysis/trading-economics-overview` endpoint.
    [X] Display overview.

--- Task: Refine TE Overview Synthesis using Gemini ---
Status: Needs Debugging
[X] 1. Install Node.js SDK: `npm install @google/generative-ai` in backend directory.
[X] 2. Add API Key: Ensure `GEMINI_API_KEY` is in `backend/.env`.
[X] 3. Create Service: Create `backend/src/services/analysis/googleGenaiService.js`.
[X] 4. Implement Service:
    [X] Add class `GoogleGenaiService` with constructor initializing SDK client.
    [X] Add `synthesizeOverview` method using `gemini-2.0-flash-thinking-exp-01-21`.
    [X] Adapt synthesis prompt for Gemini, requesting detailed analysis.
    [X] Handle API calls and responses.
[X] 5. Integrate:
    [X] Import and instantiate `GoogleGenaiService` in `analysis.js`.
    [X] Replace `cohereService.synthesizeOverview` call with `googleGenaiService.synthesizeOverview` in `/trading-economics-overview` endpoint.
[ ] 6. Test: Verify the output quality of the TE overview. (Currently returning empty - needs debugging logs)

--- Task: Integrate Economic Calendar --- 
[X] 1. Define API & Data: Identified RapidAPI endpoint and data structure.
[X] 2. Backend Implementation:
    [X] Add API keys to `.env` (Use existing RapidAPI key).
    [X] Create `EconomicCalendarService.js`.
    [X] Implement event fetching logic in service.
    [X] Create `/api/calendar/events` endpoint in `calendarRoutes.js`.
    [X] Register router in `server.js`.
[X] 3. Frontend Implementation:
    [X] Create `EconomicCalendar.tsx` component.
    [X] Add data fetching logic (hook/useEffect) to fetch weekly events.
    [X] Implement filtering/display logic for "Today's Upcoming", "Today's Past", and "This Week".
    [X] Integrate component into `NewsDashboard.tsx` UI.
[X] 4. LLM Integration (See New Task Below)
[X] 5. Testing: Test backend, frontend display.

--- Task: Add LLM Interpretation for Calendar ---
[X] 1. Event-Level Interpretation:
    [X] Backend: Create `POST /api/calendar/interpret-event` endpoint.
    [X] Backend: Implement LLM call in endpoint to explain single event significance.
    [X] Frontend: Add UI element in `EconomicCalendar.tsx` to trigger interpretation.
    [X] Frontend: Display LLM explanation (tooltip/modal).
[X] 2. Contextual Interpretation (News + Calendar):
    [X] Backend: Modify analysis routes (`/interpret-event`) to accept `marketOverview`. (Implemented in interpret-event)
    [X] Backend: Update LLM prompt (`googleGenaiService`) to accept `marketOverview`. (Implemented in interpret-event prompt)
    [X] Backend: Update prompt instructions to require interpreting event *in context* of market overview. (Implemented in interpret-event prompt)
    [X] Frontend: Pass `marketOverview` from `NewsDashboard` to `EconomicCalendar`.
    [X] Frontend: Use `marketOverview` prop in `handleInterpretEvent` call.
    [ ] Backend: Modify synthesis routes (`/market-overview`, `/trading-economics-overview`) to also fetch relevant calendar events. (Deferred/Optional)
    [ ] Backend: Update synthesis prompts (`CohereService`, `GoogleGenaiService`) to accept calendar events. (Deferred/Optional)
    [ ] Backend: Update synthesis prompt instructions to require synthesizing news *in context* of calendar events. (Deferred/Optional)
[X] 3. Testing: Test interpretation endpoints and contextual synthesis outputs.

--- Task: Integrate Earnings Calendar (FMP API / Mboum History) ---
[X] 1. Backend: Add `FMP_API_KEY` to `.env`.
[X] 2. Backend: Add `MBOUM_RAPIDAPI_KEY` to `.env` (Use key: 9f107deaabmsh2efbc3559ddca05p17f1abjsn271e6df32f7c).
[X] 3. Backend: Ensure `EarningsCalendarService.js` uses FMP API (`/stable/earnings-calendar`) for *range* fetching.
[X] 4. Backend: Ensure `fetchHistoricalEarnings(symbol)` method uses Mboum *`earnings`* module.
[X] 5. Backend: Add `fetchEarningsTrendData(symbol)` method to use Mboum *`earnings-trend`* module.
[X] 6. Backend: Ensure LLM prompt logic exists (in `googleGenaiService.analyzeEarningsTrend`).
[X] 7. Backend: Ensure `GET /api/calendar/earnings` only fetches calendar range data.
[X] 8. Backend: Ensure `POST /api/calendar/earnings/analyze` route exists for on-demand analysis.
[X] 9. Backend: Modify `POST /api/calendar/earnings/analyze` route to fetch *both* history and trend data.
[X] 10. Backend: Update `googleGenaiService.buildEarningsTrendPrompt` to incorporate *both* history and trend data.
[X] 11. Frontend: Ensure `EarningsCalendar.tsx` uses on-demand state and calls POST route.
[ ] 12. Docs: Update `hybrid.md`.
[X] 13. Testing: Test backend/frontend enhanced on-demand analysis flow.

--- Task: Implement Persistent Overall Market Context Engine ---

**Goal:** Create a system that generates, stores, and evolves a daily market context summary, incorporating previous context, latest news overviews, and upcoming catalysts, while also providing actionable takeaways.

**Approach:** Hybrid Approach v2 (Periodic Job (Manual Trigger for now), Supabase Context Storage, Redis Input Cache, Single LLM Synthesis Call)

**Implementation Plan:**

**Phase 1: Backend Setup & Logic (Completed)**

*   `[X]` **1. Scheduler Setup:** (Manual Trigger via POST Endpoint implemented)
    *   `[-]` a. *(Deferred: Install `node-cron`)*
    *   `[-]` b. *(Deferred: Create `contextScheduler.js`)*
    *   `[-]` c. *(Deferred: Configure cron job)*
*   `[X]` **2. Supabase Schema:**
    *   `[X]` a. Defined and created `market_context` table.
    *   `[X]` b. Columns: `id`, `generated_at`, `context_text`.
*   `[X]` **3. Market Context Service (`marketContextService.js`):**
    *   `[X]` a. Created `backend/src/services/analysis/marketContextService.js`.
    *   `[X]` b. Implemented `MarketContextService` class.
    *   `[X]` c. Implemented `generateAndStoreContext()`:
        *   `[X]` i. Fetch Previous Context (Supabase).
        *   `[X]` ii. Fetch Latest News Overviews (Redis).
        *   `[X]` iii. Fetch Upcoming Economic Catalysts.
        *   `[X]` iv. Fetch Upcoming Earnings Catalysts.
        *   `[X]` v. Build LLM Prompt.
        *   `[X]` vi. Call LLM (Gemini).
        *   `[X]` vii. Store Result (Supabase).
*   `[X]` **4. Integration & Caching:**
    *   `[X]` a. Instantiated `MarketContextService`.
    *   `[X]` b. Created Manual Trigger Endpoint: `POST /api/context/generate-now`.
    *   `[X]` c. Modified overview endpoints (`analysis.js`) to cache results in Redis.

**Phase 2: Frontend API & Display (Completed)**

*   `[X]` **5. Backend API Endpoint (Read):**
    *   `[X]` a. Created `backend/src/routes/contextRoutes.js`.
    *   `[X]` b. Defined `GET /api/context/latest` endpoint.
    *   `[X]` c. Implemented handler to read from Supabase.
    *   `[X]` d. Registered router in `server.js`.
*   `[X]` **6. Frontend Hook:**
    *   `[X]` a. Created `src/hooks/useMarketContext.ts`.
    *   `[X]` b. Implemented hook to fetch from `/api/context/latest`.
*   `[X]` **7. Frontend Display Component:**
    *   `[X]` a. Created `src/components/Context/MarketContextDisplay.tsx`.
    *   `[X]` b. Component displays context string, handles loading/error.
*   `[X]` **8. Integrate into Dashboard:**
    *   `[X]` a. Called `useMarketContext` hook in `NewsDashboard.tsx` (implicitly via Display component).
    *   `[X]` b. Added `<MarketContextDisplay />` component to dashboard.
    *   `[X]` c. Added Manual Trigger Button with refetch logic.

**Phase 3: Enhancing Existing Features (Completed)**

*   `[X]` **9. Contextualize Interpretations/Analyses:**
    *   `[X]` a. Fetched context in `EconomicCalendar.tsx` & `EarningsCalendar.tsx` using hook.
    *   `[X]` b. Modified backend analysis endpoints (`/interpret-event`, `/earnings/analyze`) to accept `overallContext`.
    *   `[X]` c. Modified LLM service methods/prompts (`googleGenaiService`) to use the `overallContext`.

**Phase 4: Documentation & Refinement**

*   `[ ]` **10. Update Docs:** Update `.cursorrules`, `progress.md`, `hybrid.md` etc.
*   `[ ]` **11. Testing & Prompt Tuning:** Test generation, refine prompts.
*   `[ ]` **12. Implement Scheduler:** Replace manual trigger with `node-cron` job.

--- Brainstorming & Future Improvements ---

*   **Data Quality & Consistency:**
    *   [ ] **TE Overview Debug:** Resolve the empty overview issue. Ensure `scrapeNews` provides reliable summaries or adjust the gathering logic.
    *   [ ] **API Error Handling:** Implement more robust error handling for external APIs (Diffbot, Cohere, Gemini, FMP, Mboum, RapidAPI), potentially with retries or user notifications.
    *   [ ] **Data Standardization:** Ensure consistent date formats, numeric types, etc., across all fetched data before storage or processing.
*   **LLM Usage & Prompting:**
    *   [ ] **Synthesis Prompts:** Review and refine prompts for both Cohere and Gemini synthesis (market overview, earnings trend) for clarity, accuracy, and consistency.
    *   [ ] **LLM Error Handling:** Add specific checks for empty or error responses from LLM APIs and provide fallback messages. Implement fallback models if experimental ones fail.
    *   [ ] **Model Exploration:** Experiment with different LLM models (e.g., other Gemini versions, Cohere models) or parameters (temperature) for specific tasks.
*   **Filtering & Relevance:**
    *   [ ] **Earnings Filtering:** Re-evaluate filtering options for the FMP earnings calendar (e.g., based on presence of estimates, market cap if fetchable via another API).
    *   [ ] **User Filters:** Allow users to customize importance filters or other display options for calendars.
    *   [ ] **Relevance Sorting:** Improve how news or events are prioritized or sorted based on potential market impact.
*   **UI/UX:**
    *   [ ] **Loading/Error States:** Provide more granular loading indicators (e.g., "Fetching content...", "Summarizing...", "Synthesizing..."). Improve error message presentation.
    *   [ ] **Analysis Display:** Show confidence scores or source information for LLM-generated analysis. Make interpretation areas more visually distinct.
    *   [ ] **Settings:** Add a user settings panel (e.g., API keys if applicable, default filters).
*   **Backend/Architecture:**
    *   [ ] **Dependency Injection:** Refactor services (`Cohere`, `Gemini`, `Calendar`, etc.) to use dependency injection for better testability.
    *   [ ] **Caching:** Review Redis caching strategies (durations, keys, invalidation) for effectiveness.
    *   [ ] **Task Queuing:** Consider using a task queue (e.g., BullMQ) for longer-running analysis processes (like multi-step market overview) to avoid blocking API responses.
*   **Documentation:**
    *   [X] **hybrid.md:** Update with details on FMP/Mboum integration for earnings.
    *   [ ] Add documentation for API endpoints and data structures.

--- Task: Implement Configurable Source Monitor & Diffbot Analyzer ---

**Goal:** Develop a reusable Python script that monitors specified web pages for new articles and analyzes them using Diffbot.

**Phase 1: Basic ForexLive Monitor & Diffbot Integration**

*   `[ ]` **1. Create Script:** Create a new Python script, e.g., `backend/src/scripts/monitor_source.py`.
*   `[ ]` **2. Add Dependencies:** Ensure necessary Python libraries are installed in the `./venv` environment (`requests`, `beautifulsoup4`, `redis`, `python-dotenv`). *Action: Need to run pip install if not present.*
*   `[ ]` **3. Configuration:**
    *   Define initial configuration *within the script* for ForexLive:
        *   `SOURCE_NAME = "ForexLiveCentralBanks"`
        *   `SOURCE_URL = "https://www.forexlive.com/CentralBanks"`
        *   `ARTICLE_LINK_SELECTOR = "..."` (CSS selector to find article `<a>` tags on the page - *needs inspection of ForexLive HTML*)
        *   `REDIS_PROCESSED_KEY = f"processed_urls:{SOURCE_NAME}"`
*   `[ ]` **4. Fetch & Parse Logic:**
    *   Implement a function `fetch_and_extract_articles(url, selector)`:
        *   Use `requests` to get page HTML. Handle errors.
        *   Use `BeautifulSoup` to parse HTML.
        *   Find all elements matching `ARTICLE_LINK_SELECTOR`.
        *   Extract the absolute URL (`href`) from each element.
        *   Return a `set` of current article URLs found on the page.
*   `[ ]` **5. State Management (Redis):**
    *   Implement functions to interact with Redis:
        *   `connect_redis()`: Connect using `REDIS_URL` from `.env`.
        *   `get_processed_urls(redis_client, key)`: Use `SMEMBERS` to get the set of processed URLs.
        *   `add_processed_url(redis_client, key, url)`: Use `SADD` to add a URL to the set.
*   `[ ]` **6. Diffbot Call Logic:**
    *   Implement `analyze_with_diffbot(article_url)`:
        *   Get `DIFFBOT_TOKEN` from `.env`.
        *   Construct the Diffbot `/v3/analyze` API URL.
        *   Make the `requests.get` call to Diffbot. Handle errors.
        *   Return the parsed JSON result from Diffbot.
*   `[ ]` **7. Main Loop Logic:**
    *   Connect to Redis.
    *   Load `processed_urls` for the source.
    *   Fetch `current_urls` for the source.
    *   Identify `new_urls = current_urls - processed_urls`.
    *   For each `url` in `new_urls`:
        *   Call `analyze_with_diffbot(url)`.
        *   If successful:
            *   Print/Log the Diffbot result (e.g., as JSON).
            *   Call `add_processed_url()` to mark it as done.
*   `[ ]` **8. Testing:** Run the script manually (`./venv/bin/python backend/src/scripts/monitor_source.py`) and verify it fetches, detects new articles (on subsequent runs), calls Diffbot, and updates Redis.

**Phase 2: Configuration & Replicability**

*   `[ ]` **9. External Configuration:**
    *   Move source configurations (URL, selector, Redis key prefix) out of the script into a separate file (e.g., `config/monitored_sources.json` or a Python dict).
    *   Example structure:
        ```json
        {
          "ForexLiveCentralBanks": {
            "url": "https://www.forexlive.com/CentralBanks",
            "selector": "article h3 a", // Example selector - needs verification
            "fetch_method": "requests" // Could add 'selenium' later if needed
          },
          "AnotherSource": { ... }
        }
        ```
*   `[ ]` **10. Script Argument:** Modify the script to accept a `source_name` as a command-line argument.
*   `[ ]` **11. Dynamic Loading:** Load the configuration for the specified `source_name` at the start of the script. Use the loaded config values (URL, selector, Redis key) throughout the script.

**Phase 3: Integration & Scheduling**

*   `[ ]` **12. Define Data Destination:** Decide *where* the structured data from Diffbot should go. Options:
    *   **Option A (Simple):** Just log the JSON output from the script.
    *   **Option B (Supabase):** Add logic (maybe using `supabase-py` if installed, or preferably calling a dedicated Node.js backend endpoint) to insert relevant fields from the Diffbot result into the `articles` table or a new table.
    *   **Option C (Redis):** Store the results temporarily in Redis if another service will consume them quickly.
*   `[ ]` **13. Implement Data Storage:** Implement the chosen storage mechanism from step 12 within the script's main loop after a successful Diffbot analysis.
*   `[ ]` **14. Scheduling:** Set up a system scheduler (like `cron` on Linux/macOS or Task Scheduler on Windows) to run the `monitor_source.py` script periodically for each configured source.
    *   Example `cron` entry (runs every 15 mins for ForexLive):
        `*/15 * * * * cd /path/to/project && /path/to/project/venv/bin/python backend/src/scripts/monitor_source.py ForexLiveCentralBanks >> /path/to/logfile.log 2>&1`

**Phase 4: Error Handling & Refinements**

*   `[ ]` **15. Robust Errors:** Add more specific error handling for network timeouts, HTTP errors (from source and Diffbot), parsing errors, Redis connection issues.
*   `[ ]` **16. Rate Limiting:** Be mindful of potential rate limits on Diffbot and the target websites. Add delays if necessary.
*   `[ ]` **17. Logging:** Improve logging for better monitoring (use Python's `logging` module).

--- Brainstorming & Future Improvements ---
Instructions
During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the Lessons section in the .cursorrules file so you will not make the same mistake again.

You should also use the .cursorrules file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g. [X] Task 1 [ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask. Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan. The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

Tools
Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

Screenshot Capture:
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
LLM Verification with Images:
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
Example workflow:

from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
LLM
You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
The LLM API supports multiple providers:

OpenAI (default, model: gpt-4o)
Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
DeepSeek (model: deepseek-chat)
Anthropic (model: claude-3-sonnet-20240229)
Gemini (model: gemini-pro)
Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)
But usually it's a better idea to check the content of the file and use the APIs in the tools/llm_api.py file to invoke the LLM if needed.

Web browser
You could use the tools/web_scraper.py file to scrape the web.

venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
This will output the content of the web pages.

Search engine
You could use the tools/search_engine.py file to search the web.

venv/bin/python ./tools/search_engine.py "your search keywords"
This will output the search results in the following format:

URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
If needed, you can further use the web_scraper.py file to scrape the web page content.

Lessons
User Specified Lessons
You have a python venv in ./venv. Use it.
Include info useful for debugging in the program output.
Read the file before you try to edit it.
Due to Cursor's limit, when you use git and gh and need to submit a multiline commit message, first write the message in a file, and then use git commit -F <filename> or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
Cursor learned
For search results, ensure proper handling of different character encodings (UTF-8) for international queries
Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
When using f-strings with JSON templates, double the curly braces {{ and }} to escape them properly and avoid format specifier errors
When working with experimental models like gemini-2.0-flash-thinking-exp-01-21, always implement fallback mechanisms to standard models in case the experimental model is unavailable
For options data, use RapidAPI directly instead of the YahooFinanceConnector class to avoid compatibility issues with the OptionChainQuote initialization
When processing options data from RapidAPI, create a mapping of strikes to straddles for easier lookup and processing of call and put data
When implementing the display_analysis function in Streamlit, ensure it combines all necessary display components (market overview, ticker analysis, technical insights, learning points) to avoid NameError exceptions
Scratchpad

--- Task: Implement Market Overview from Multiple News Articles ---

Status: Complete (Initial Implementation)

Overview
Integrate a new feature that analyzes a batch of ~20 news articles to provide a market overview, moving beyond the current single-article analysis triggered by a button.

--- RealTimeNews Source (Completed) ---
[X] 1. Modify backend API fetching (Handled by NewsProviderFactory/RealTimeNewsAdapter)
[X] 2. Create Backend Endpoint (`/api/analysis/market-overview`)
[X] 3. Implement Title Triage (CohereService.triageArticleTitles)
[X] 4. Implement Selective Content Fetching (DiffbotService)
[X] 5. Implement Selective Summarization (CohereService.analyzeArticle)
[X] 6. Implement Synthesis (CohereService.synthesizeOverview)
[X] 7. Integrate into Frontend (`RealTimeNews.tsx`)

--- TradingEconomics Source (Completed) ---
[X] 1. Verify/Modify Backend Fetching:
    [X] Ensure `scrapeNews` fetches ~20 articles with existing summaries.
    [X] Map fetched data includes summary in `content` field.
[X] 2. Create New Backend Endpoint (`/api/analysis/trading-economics-overview`):
    [X] Implement new POST route in `analysis.js`.
    [X] Step 1: Reuse `CohereService.triageArticleTitles`.
    [X] Step 2 (Modified): Extract existing summaries from input `articles` for key URLs.
    [X] Step 3 (Skipped): No summarization needed.
    [X] Step 4: Reuse `CohereService.synthesizeOverview` with extracted summaries.
    [X] Step 5: Return synthesized overview.
[X] 3. Integrate into Frontend (`NewsDashboard.tsx` / relevant TE component):
    [X] Add state for overview/loading.
    [X] Trigger call to *new* `/api/analysis/trading-economics-overview` endpoint.
    [X] Display overview.

--- Task: Refine TE Overview Synthesis using Gemini ---
[ ] 1. Install Node.js SDK: `npm install @google/generative-ai` in backend directory.
[ ] 2. Add API Key: Ensure `GEMINI_API_KEY` is in `backend/.env`.
[ ] 3. Create Service: Create `backend/src/services/analysis/googleGenaiService.js`.
[ ] 4. Implement Service:
    [ ] Add class `GoogleGenaiService` with constructor initializing SDK client.
    [ ] Add `synthesizeOverview` method using `gemini-1.5-flash-latest` (or similar).
    [ ] Adapt synthesis prompt for Gemini, requesting detailed analysis.
    [ ] Handle API calls and responses.
[ ] 5. Integrate:
    [ ] Import and instantiate `GoogleGenaiService` in `analysis.js`.
    [ ] Replace `cohereService.synthesizeOverview` call with `googleGenaiService.synthesizeOverview` in `/trading-economics-overview` endpoint.
[ ] 6. Test: Verify the output quality of the TE overview.

--- Task: Integrate Economic Calendar --- 
[X] 1. Define API & Data: Identified RapidAPI endpoint and data structure.
[X] 2. Backend Implementation:
    [X] Add API keys to `.env` (Use existing RapidAPI key).
    [X] Create `EconomicCalendarService.js`.
    [X] Implement event fetching logic in service.
    [X] Create `/api/calendar/events` endpoint in `calendarRoutes.js`.
    [X] Register router in `server.js`.
[ ] 3. Frontend Implementation:
    [ ] Create `EconomicCalendar.tsx` component.
    [ ] Add data fetching logic (hook/useEffect) to fetch weekly events.
    [ ] Implement filtering/display logic for "Today's Upcoming", "Today's Past", and "This Week".
    [ ] Integrate component into `NewsDashboard.tsx` UI.
[ ] 4. LLM Integration (See New Task Below)
[ ] 5. Testing: Test backend, frontend display.

--- Task: Add LLM Interpretation for Calendar ---
[X] 1. Event-Level Interpretation:
    [X] Backend: Create `POST /api/calendar/interpret-event` endpoint.
    [X] Backend: Implement LLM call in endpoint to explain single event significance.
    [X] Frontend: Add UI element in `EconomicCalendar.tsx` to trigger interpretation.
    [X] Frontend: Display LLM explanation (tooltip/modal).
[ ] 2. Contextual Interpretation (News + Calendar):
    [X] Backend: Modify analysis routes (`/interpret-event`) to accept `marketOverview`. (Implemented in interpret-event)
    [X] Backend: Update LLM prompt (`googleGenaiService`) to accept `marketOverview`. (Implemented in interpret-event prompt)
    [X] Backend: Update prompt instructions to require interpreting event *in context* of market overview. (Implemented in interpret-event prompt)
    [X] Frontend: Pass `marketOverview` from `NewsDashboard` to `EconomicCalendar`.
    [X] Frontend: Use `marketOverview` prop in `handleInterpretEvent` call.
    [ ] Backend: Modify synthesis routes (`/market-overview`, `/trading-economics-overview`) to also fetch relevant calendar events. (Deferred/Optional)
    [ ] Backend: Update synthesis prompts (`CohereService`, `GoogleGenaiService`) to accept calendar events. (Deferred/Optional)
    [ ] Backend: Update synthesis prompt instructions to require synthesizing news *in context* of calendar events. (Deferred/Optional)
[ ] 3. Testing: Test interpretation endpoints and contextual synthesis outputs.

--- Task: Integrate Earnings Calendar (FMP API / Mboum History) ---
[X] 1. Backend: Add `FMP_API_KEY` to `.env`.
[X] 2. Backend: Add `MBOUM_RAPIDAPI_KEY` to `.env` (Use key: 9f107deaabmsh2efbc3559ddca05p17f1abjsn271e6df32f7c).
[X] 3. Backend: Ensure `EarningsCalendarService.js` uses FMP API (`/stable/earnings-calendar`) for *range* fetching.
[X] 4. Backend: Ensure `fetchHistoricalEarnings(symbol)` method uses Mboum *`earnings`* module.
[ ] 5. Backend: Add `fetchEarningsTrendData(symbol)` method to use Mboum *`earnings-trend`* module.
[X] 6. Backend: Ensure LLM prompt logic exists (in `googleGenaiService.analyzeEarningsTrend`).
[X] 7. Backend: Ensure `GET /api/calendar/earnings` only fetches calendar range data.
[X] 8. Backend: Ensure `POST /api/calendar/earnings/analyze` route exists for on-demand analysis.
[ ] 9. Backend: Modify `POST /api/calendar/earnings/analyze` route to fetch *both* history and trend data.
[ ] 10. Backend: Update `googleGenaiService.buildEarningsTrendPrompt` to incorporate *both* history and trend data.
[X] 11. Frontend: Ensure `EarningsCalendar.tsx` uses on-demand state and calls POST route.
[ ] 12. Docs: Update `hybrid.md`.
[ ] 13. Testing: Test backend/frontend enhanced on-demand analysis flow.